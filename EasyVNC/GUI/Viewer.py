# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'viewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import socket
import ssl
import pickle
import webbrowser

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QMenuBar, QToolBar, QAction, QTableView

from GUI.AddDevice import AddDeviceUI
from localData.utils import read_socket_data, read_data


class ViewerUI(QMainWindow):

    def __init__(self, parent=None):
        """"Initializer."""
        super().__init__(parent)
        self.setWindowTitle("EasyVNC Viewer")
        self.resize(1000, 700)

        self._createActions()
        self._createMenuBar()
        self._createToolBars()
        self._connectActions()


    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1000, 700)
        #self._createMenuBar()


        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)
        Form.setMinimumSize(QtCore.QSize(800, 50))
        self.verticalLayout = QtWidgets.QVBoxLayout(self)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.frame = QtWidgets.QFrame(self)
        self.frame.setEnabled(True)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(0, 30, 1001, 71))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.lineEdit = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit.setGeometry(QtCore.QRect(160, 10, 511, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setPlaceholderText("Rechercher une Device")
        self.comboBox = QtWidgets.QComboBox(self.frame_2)
        self.comboBox.setGeometry(QtCore.QRect(680, 20, 301, 27))
        self.comboBox.setObjectName("comboBox")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setGeometry(QtCore.QRect(0, 100, 231, 601))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.btn_cam = QtWidgets.QPushButton(self.frame_3)
        self.btn_cam.setGeometry(QtCore.QRect(30, 30, 151, 31))
        self.btn_cam.setObjectName("pushButton")
        self.btn_audio = QtWidgets.QPushButton(self.frame_3)
        self.btn_audio.setGeometry(QtCore.QRect(30, 90, 151, 31))
        self.btn_audio.setObjectName("pushButton_2")
        self.btn_mount = QtWidgets.QPushButton(self.frame_3)
        self.btn_mount.setGeometry(QtCore.QRect(30, 160, 151, 31))
        self.btn_mount.setObjectName("pushButton_3")
        self.tableView = QtWidgets.QTableWidget(self.frame)
        self.tableView.setGeometry(QtCore.QRect(235, 101, 761, 601))
        self.tableView.setObjectName("Tableview")
        self.tableView.setRowCount(0)
        self.tableView.setColumnCount(5)
        self.tableView.setSelectionBehavior(QTableView.SelectRows);
        self.verticalLayout.addWidget(self.frame)


        self.loadUserData()


        self.setCentralWidget(self.frame)


        #self._createMenuBar()
        #self._createToolBars()

        self.btn_cam.clicked.connect(self.open_webcam)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.comboBox.setStyleSheet("font-weight: bold; color : white;")
        self.btn_cam.setText(_translate("Form", "lire WebCam"))
        self.btn_audio.setText(_translate("Form", "lire l'audio"))
        self.btn_mount.setText(_translate("Form", "Monter dossier partager"))

        data = read_data()
        usermail = data['usermail']
        self.comboBox.addItem("")
        self.comboBox.setItemData(0, usermail)
        self.comboBox.setItemText(0, _translate("Form", usermail))
        self.comboBox.addItem("")
        self.comboBox.setItemData(1, "1")
        self.comboBox.setItemText(1, "Modifier son compte")
        #self.comboBox.addItem("")
        self.comboBox.setItemData(3, "3")
        self.comboBox.setItemText(3, "Deconnexion")
        self.comboBox.setCurrentText(_translate("Form", usermail))

        # Creation de la barre de Menu
    def _createMenuBar(self):
        # menuBar = QMenuBar(self)
        # self.setMenuBar(menuBar)
        menuBar = self.menuBar()
        menuBar.setFocus()
        # Creation du menu
        ##CMD Menu
        cmdMenu = menuBar.addMenu("&Commandes")
        cmdMenu.addSection("")
        cmdMenu.addAction(self.adAction)
        cmdMenu.addSection("")
        cmdMenu.addAction(self.decoAction)
        cmdMenu.addSection("")
        cmdMenu.addAction(self.renameAction)
        cmdMenu.addAction(self.removeAction)
        cmdMenu.addAction(self.propertyAction)
        cmdMenu.addSection("")
        cmdMenu.addAction(self.webcamAction)
        cmdMenu.addAction(self.audioAction)
        cmdMenu.addAction(self.shareDocAction)
        cmdMenu.addSection("")
        cmdMenu.addAction(self.quitAction)

        #menu afficher
        viewMenu = menuBar.addMenu("&Affichage")
        viewMenu.addSection("")
        viewMenu.addAction(self.refreshAction)
        viewMenu.addAction(self.hideCMDAction)

        helpMenu = menuBar.addMenu("&Aide")
        helpMenu.addAction(self.quickAction)

        # Cretion des ToolBar
    def _createToolBars(self):
        # Using a title
        fileToolBar = self.addToolBar("Commandes")
        # Using a QToolBar object
        editToolBar = QToolBar("Affichage", self)
        self.addToolBar(editToolBar)
        # Using a QToolBar object and a toolbar area
        helpToolBar = QToolBar("Aide", self)
        self.addToolBar(Qt.LeftToolBarArea, helpToolBar)

    def _createActions(self):
        #Ajout des actions
        self.adAction = QAction("&Nouvelle Device...", self)
        self.decoAction = QAction("&Deconnexion...", self)
        self.renameAction = QAction("&Rennomer", self)
        self.removeAction = QAction("&Supprimer", self)
        self.propertyAction = QAction("&Propriétes...", self)
        self.webcamAction = QAction("&Se connecter à la Webcam", self)
        self.audioAction = QAction("&Se connecter à l'audio", self)
        self.shareDocAction = QAction("&Ouvrir le dossier Partager", self)
        self.quitAction = QAction("&Quitter", self)
        self.refreshAction = QAction("&Actualiser", self)
        self.hideCMDAction = QAction("&Cacher la barre commandes", self)
        self.quickAction = QAction("&Quick start", self)

    def _connectActions(self):
            # Connect CMD actions
        self.adAction.triggered.connect(self.addDevice)
        self.refreshAction.triggered.connect(self.loadUserData)


    def addDevice(self):

        self.Dialog = QtWidgets.QDialog()
        self.ui = AddDeviceUI()
        self.ui.setupUi(self.Dialog)
        self.Dialog.show()

    def loadUserData(self):
        self.socket_data = read_socket_data()
        hostname = self.socket_data['hostname']
        port = int(self.socket_data['socket_port'])
        context = ssl.create_default_context()
        cert = os.path.dirname(os.path.realpath(__file__)) + '/../Cert/cert.pem'
        print(cert)
        context.load_verify_locations(cert)
        conn = context.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM), server_side=False,
                                   server_hostname=hostname)
        conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        conn.connect((hostname, port))
        response = conn.recv(2048)
        # print(response.decode())
        req = 3002

        self.user_data = read_data()
        self.usermail = self.user_data['usermail']
        self.user_id = self.user_data['user_id']
        self.token = self.user_data['session_id']
        print(self.token)
        data = str(req) + ";" + self.user_id +";" + self.usermail + ";" + self.token
        conn.send(str.encode(data))
        # Receive response
        response = conn.recv(2048)
        response = pickle.loads(response)
        print(response)
        conn.close()
        self.tableView.setRowCount(len(response))
        row = 0
        self.tableView.setColumnWidth(3,200)
        self.tableView.setColumnWidth(0, 200)
        self.tableView.setColumnWidth(4, 130)
        self.tableView.setHorizontalHeaderLabels(['Device', 'WebCam', 'Audio', 'Shared Folder','IP'])
        for device in response:
            self.tableView.setItem(row, 0, QtWidgets.QTableWidgetItem(device[2]))
            self.tableView.setItem(row, 1, QtWidgets.QTableWidgetItem(str(device[3])))
            self.tableView.setItem(row, 2, QtWidgets.QTableWidgetItem(str(device[4])))
            self.tableView.setItem(row, 3, QtWidgets.QTableWidgetItem(device[6]))
            self.tableView.setItem(row, 4, QtWidgets.QTableWidgetItem(device[7]))
            row = row+ 1
        #for row_number,rowdata in enumerate(response):
            #self.tableView.insertRow(row_number)
            #for column_num, data in enumerate(rowdata):
             #   self.tableView.setItem(row_number,column_num, QtWidgets.QTableWidgetItem(str(data)))


    def open_webcam(self):
        for index in sorted(self.tableView.selectionModel().selectedRows()):
            row = index.row()
            #path = self.tableView.item(row,3).text()
            IP = self.tableView.item(row, 4).text()
            import webbrowser
            webbrowser.open('http://'+ IP + ':30000', new=2)
            print(IP)


""""
if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = ViewerUI()
    ui.setupUi(Form)
    ui.show()
    sys.exit(app.exec_())
"""